// Create breakpoint-managed shadows/positioning/backgrounds

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    // Responsive Box Shadows
    .shadow#{$infix}-md {
      box-shadow: $box-shadow !important;
    }
    .shadow#{$infix}-sm {
      box-shadow: $box-shadow-sm !important;
    }
    .shadow#{$infix}-lg {
      box-shadow: $box-shadow-lg !important;
    }
    .shadow#{$infix}-xl {
      box-shadow: $box-shadow-xl !important;
    }
    .shadow#{$infix}-none {
      box-shadow: none !important;
    }

    // Responsive Text Shadows
    .text-shadow#{$infix}-md, .text-shadow {
      text-shadow: $text-shadow !important;
    }
    .text-shadow#{$infix}-sm {
      text-shadow: $text-shadow-sm !important;
    }
    .text-shadow#{$infix}-lg {
      text-shadow: $text-shadow-lg !important;
    }
    .text-shadow#{$infix}-xl {
      text-shadow: $text-shadow-xl !important;
    }
    .text-shadow#{$infix}-none {
      text-shadow: none !important;
    }

    // Responsive positioning
    .position#{$infix}-static {
      position: static !important;
    }
    .position#{$infix}-absolute {
      position: absolute !important;
    }
    .position#{$infix}-relative {
      position: relative !important;
    }

    // Responsive Backgrounds
    @each $color, $value in $theme-colors {
      @include bg-variant(".bg#{$infix}-#{$color}", $value);
    }
    .bg#{$infix}-transparent {
      background-color: transparent !important;
    }
  }
}

// Create button--{color} variant css

.button {
  @extend .btn;
}

@each $color, $value in $theme-colors {
  .button--#{$color} {
    @include button-variant($value, $value);
  }
}

// Image overlay cards

.img-overlay {
  position: relative;
  > .img-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    opacity: .25;
    object-fit: cover;
    object-position: center;
  }
  > .overlay {
    position: relative;
    z-index: 1;
  }
}

// Image backgrounds

.background-container {
  background-size: cover;
  background-position: center center;
}

.background-img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
}

// Color overlays

.color-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// Media Loading (Centering Blazy loading throbber)

.media--loading {
  background: #eee;
  position: static;
}

// Hide nested container gutters

.container .container, .container-fluid .container {
  &.no-nested-gutters {
    padding-left: 0;
    padding-right: 0;
  }
}

// Increase specificity on hidden class

body .hidden {
  display: none;
}

// Absolute positioning

.absolute-top {
  position: absolute;
  top: 0;
}

.absolute-bottom {
  position: absolute;
  bottom: 0;
}

// Image hover effects

.zoom-wrap {
  overflow: hidden;

  img, iframe, video {
    transition: $transition-base !important;
  }

  &:hover {
    img, iframe, video {
      transform: scale(1.05);
    }
  }
}

.lighten-wrap {
  background: $dark;

  img:not(.paragraph-background-container img), iframe, video, .paragraph-background-container {
    transition: $transition-base !important;
    opacity: .8;
  }

  &:hover {
    img:not(.paragraph-background-container img), iframe, video, .paragraph-background-container {
      opacity: 1;
    }
  }
}

.darken-wrap {
  background: $dark;

  img:not(.paragraph-background-container img), iframe, video, .paragraph-background-container {
    transition: $transition-base !important;
    opacity: 1;
  }

  &:hover {
    img:not(.paragraph-background-container img), iframe, video, .paragraph-background-container {
      opacity: .8;
    }
  }
}
